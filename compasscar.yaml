openapi: 3.0.3
info:
  title: CompassCar
  description: Api for car purchase register
  termsOfService: http://swagger.io/terms/
  contact:
    email: apiteam@swagger.io
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.11
externalDocs:
  description: Find out more about Swagger
  url: http://swagger.io
servers:
  - url: https://petstore3.swagger.io/api/v3
tags:
  - name: car
    description: Operations about car
  - name: user
    description: Operations about user
  - name: order
    description: Operations about order
paths:
  /cars:
    post:
      tags:
        - car
      summary: Add a new car to the database
      description: Add a new car to the database
      operationId: createCar
      requestBody:
        description: Create a new car in the database
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateCar'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Car'          
        '400':
          description: Validation error
        '409':
          description: Car already exist
      # security:
      #   - petstore_auth:
      #       - write:pets
      #       - read:pets
    get:
      tags:
        - car
      summary: Find all cars using params to filter
      description: Finds all cars based on the properties provided in the query string, all properties are optional and it is also possible to sort using(year, mileage or price). The answer is a paginated car list
      parameters:
        - name: model
          in: query
          description: model of car to filter
          required: false
          schema:
            type: string
            example: Fiat
        - name: brand
          in: query
          description: brand of car to filter
          required: false
          schema:
            type: string
            example: Fiat
        - name: untilYear
          in: query
          description: Filter cars until specific year
          required: false
          schema:
            type: integer
            example: 2020
        - name: fromYear
          in: query
          description: Filter cars from a specific year. If untilYear and fromYear are given, cars from that range are caught in the filter
          required: false
          schema:
            type: string
            example: 2017
        - name: minPrice
          in: query
          description: Filter cars based on the minimum price
          required: false
          schema:
            type: number
            format: double
            example: 50000.00
        - name: maxPrice
          in: query
          description: Filter cars based on the maximum price. If minPrice and maxPrice are given, cars from the range between minPrice and maxPrice are caught in the filter
          required: false
          schema:
            type: number
            format: double
            example: 50000.00
        - name: items
          in: query
          description: Filter cars based on item name 
          required: false
          schema:
            type: array
            items:
              type: string
            example: ["Vidro fumê", "Nitro"]
        - name: status
          in: query
          description: Filter cars based on car status
          required: false
          schema:
            enum: ["ativo", "inativo"]
            example: "ativo"
        - name: mileage
          in: query
          description: Filters cars with lower or equal mileage than given
          required: false
          schema:
            type: integer
            example: 20000
        - name: licensePlateFinalDigits
          in: query
          description: Filter cars who the last four digits of license plate corresponds 
          required: false
          schema:
            type: string
            example: "8231"
      operationId: readCars
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/readCarsResult'  
        '400':
          description: Validation error
        '409':
          description: Car already exist
  /cars/{carId}:
    patch:
      tags:
        - car
      summary: Update an existing car
      description: Update an existing car by Id
      operationId: updateCar
      parameters:
        - name: carId
          in: path
          description: ID of car to return
          required: true
          schema:
            type: string
            example: 05c3772d-83eb-4a43-a626-901a02efb95
            format: uuid
      requestBody:
        description: Update an existent car in the database
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateCar'
        required: false
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Car'          
        '400':
          description: Invalid ID supplied
        '404':
          description: Car don't exist
        '409':
          description: Car already exist
      # security:
      #   - petstore_auth:
      #       - write:pets
      #       - read:pets
    get:
      tags:
        - car
      summary: Find car by ID
      description: Return a specific car
      operationId: readCar
      parameters:
        - name: carId
          in: path
          description: ID of car to return
          required: true
          schema:
            type: string
            format: uuid
            example: 05c3772d-83eb-4a43-a626-901a02efb95
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Car'          
        '400':
          description: Validation error
        '404':
          description: Car don't exist
      # security:
      #   - api_key: []
      #   - petstore_auth:
      #       - write:pets
      #       - read:pets
    delete:
      tags:
        - car
      summary: Delete a car
      description: Soft delete a car changing the car status to "excluído"
      operationId: deleteCar
      parameters:
        # - name: api_key
        #   in: header
        #   description: ''
        #   required: false
        #   schema:
        #     type: string
        - name: carId
          in: path
          description: Car id to delete
          required: true
          schema:
            type: string
            format: uuid
            example: 05c3772d-83eb-4a43-a626-901a02efb95
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeletedCar'
        '400':
          description: Validation error
        '404':
          description: Car not exist
      # security:
      #   - petstore_auth:
      #       - write:pets
      #       - read:pets
  /user:
    post:
      tags:
        - user
      summary: Create user
      description: This can only be done by the logged in user.
      operationId: createUser
      requestBody:
        description: Created user object
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
          application/xml:
            schema:
              $ref: '#/components/schemas/User'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        default:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
  /user/createWithList:
    post:
      tags:
        - user
      summary: Creates list of users with given input array
      description: Creates list of users with given input array
      operationId: createUsersWithListInput
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/User'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'          
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
        default:
          description: successful operation
  /user/login:
    get:
      tags:
        - user
      summary: Logs user into the system
      description: ''
      operationId: loginUser
      parameters:
        - name: username
          in: query
          description: The user name for login
          required: false
          schema:
            type: string
        - name: password
          in: query
          description: The password for login in clear text
          required: false
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          headers:
            X-Rate-Limit:
              description: calls per hour allowed by the user
              schema:
                type: integer
                format: int32
            X-Expires-After:
              description: date in UTC when token expires
              schema:
                type: string
                format: date-time
          content:
            application/xml:
              schema:
                type: string
            application/json:
              schema:
                type: string
        '400':
          description: Invalid username/password supplied
  /user/logout:
    get:
      tags:
        - user
      summary: Logs out current logged in user session
      description: ''
      operationId: logoutUser
      parameters: []
      responses:
        default:
          description: successful operation
  /user/{username}:
    get:
      tags:
        - user
      summary: Get user by user name
      description: ''
      operationId: getUserByName
      parameters:
        - name: username
          in: path
          description: 'The name that needs to be fetched. Use user1 for testing. '
          required: true
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'          
            application/xml:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Invalid username supplied
        '404':
          description: User not found
    put:
      tags:
        - user
      summary: Update user
      description: This can only be done by the logged in user.
      operationId: updateUser
      parameters:
        - name: username
          in: path
          description: name that need to be deleted
          required: true
          schema:
            type: string
      requestBody:
        description: Update an existent user in the store
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
          application/xml:
            schema:
              $ref: '#/components/schemas/User'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        default:
          description: successful operation
    delete:
      tags:
        - user
      summary: Delete user
      description: This can only be done by the logged in user.
      operationId: deleteUser
      parameters:
        - name: username
          in: path
          description: The name that needs to be deleted
          required: true
          schema:
            type: string
      responses:
        '400':
          description: Invalid username supplied
        '404':
          description: User not found
  /orders:
    post:
      tags:
        - order
      summary: Adds a new order to the database
      description: Adds a new order to the database
      operationId: createOrder
      requestBody:
        description: Create a new order in the database
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateOrder'
        required: true
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'          
        '400':
          description: Order already exists
        '404':
          description: Customer does not exist
      # security:
      #   - petstore_auth:
      #       - write:pets
      #       - read:pets
    get:
      tags:
        - order
      summary: Finds all orders using params to filter
      description: Finds all orders based on the properties provided in the query string, all properties are optional. The answer is a paginated order list
      parameters:
        - name: cep
          in: query
          description: cep of order to filter
          required: false
          schema:
            type: string
            example: 12345678
        - name: city
          in: query
          description: city of order to filter
          required: false
          schema:
            type: string
            example: Mossoró
        - name: total
          in: query
          description: Filter orders with specific total value
          required: false
          schema:
            type: integer
            example: 100000
        - name: initialDate
          in: query
          description: Filter orders from initial date
          required: false
          schema:
            type: string
            example: 2024-10-04
        - name: finalDate
          in: query
          description: Filter orders from final date
          required: false
          schema:
            type: string
            example: 2024-10-05
        - name: cancelDate
          in: query
          description: Filter orders from cancel date
          required: false
          schema:
            type: string
            example: 2024-10-04
        - name: status
          in: query
          description: Filters orders based on status. Can be "Aberto", "Aprovado" ou "Cancelado"
          required: false
          schema:
            type: string
            example: Aberto
        - name: uf
          in: query
          description: Filter orders based on uf
          required: false
          schema:
            type: string
            example: RN
      operationId: readOrders
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/readOrdersResult'  
        '204':
          description: No content
  /orders/{orderId}:
    patch:
      tags:
        - order
      summary: Update an existing order
      description: Update an existing order by Id
      operationId: updateOrder
      parameters:
        - name: orderId
          in: path
          description: ID of order to return
          required: true
          schema:
            type: string
            example: 56b40ff1-bafb-41d6-882c-f45bee53d850
            format: uuid
      requestBody:
        description: Update an existent order in the database
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateOrder'
        required: false
      responses:
        '204':
          description: No content
        '400':
          description: Order is cancelled or has a null field or a 'cancelDate' field
        '404':
          description: Order does not exist
      # security:
      #   - petstore_auth:
      #       - write:pets
      #       - read:pets
    get:
      tags:
        - order
      summary: Find order by ID
      description: Return a specific order
      operationId: readOrder
      parameters:
        - name: orderId
          in: path
          description: ID of order to return
          required: true
          schema:
            type: string
            format: uuid
            example: 56b40ff1-bafb-41d6-882c-f45bee53d850
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'          
        '400':
          description: Order does not exist
      # security:
      #   - api_key: []
      #   - petstore_auth:
      #       - write:pets
      #       - read:pets
    delete:
      tags:
        - order
      summary: Delete a order
      description: Soft delete a order changing the car status to "Cancelado"
      operationId: deleteOrder
      parameters:
        # - name: api_key
        #   in: header
        #   description: ''
        #   required: false
        #   schema:
        #     type: string
        - name: orderId
          in: path
          description: Car id to delete
          required: true
          schema:
            type: string
            format: uuid
            example: 05c3772d-83eb-4a43-a626-901a02efb95
      responses:
        '204':
          description: No content
        '400':
          description: Order is not open
        '404':
          description: Order does not exist
      # security:
      #   - petstore_auth:
      #       - write:pets
      #       - read:pets
components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 10
        username:
          type: string
          example: theUser
        firstName:
          type: string
          example: John
        lastName:
          type: string
          example: James
        email:
          type: string
          example: john@email.com
        password:
          type: string
          example: '12345'
        phone:
          type: string
          example: '12345'
        userStatus:
          type: integer
          description: User Status
          format: int32
          example: 1
      xml:
        name: user
    Car:
      required:
        - id
        - registrationDate
        - model
        - brand
        - licensePlate
        - year
        - mileage
        - items
        - price
        - status
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: 05c3772d-83eb-4a43-a626-901a02efb95
        model:
          type: string
          example: Uno
        brand:
          type: string
          example: Fiat
        year:
          type: integer
          example: 2018
        mileage:
          type: integer
          example: 20000
        licensePlate:
          type: string
          example: pco-9211
        price:
          type: integer
          example: 52500.00
        items:
          type: array
          maximum: 5
          minimum: 1
          items: 
            type: string
        registrationDate:
          type: string
          format: date-time
        status:
          type: string
          description: status of car in database
          enum:
            - ativo
            - inativo
            - excluído
    UpdateCar:
      type: object
      properties:
        model:
          type: string
          example: Uno
        brand:
          type: string
          example: Fiat
        year:
          type: integer
          example: 2018
        mileage:
          type: integer
          example: 20000
        licensePlate:
          type: string
          example: pco-9211
        price:
          type: integer
          example: 52500.00
        items:
          type: array
          maximum: 5
          minimum: 1
          items: 
            type: string
        status:
          type: string
          description: status of car in database
          enum:
            - ativo
            - inativo
            - excluído
    CreateCar:
      required:
        - model
        - brand
        - licensePlate
        - year
        - mileage
        - items
        - price
        - status
      type: object
      properties:
        model:
          type: string
          example: Uno
        brand:
          type: string
          example: Fiat
        year:
          type: integer
          example: 2018
        mileage:
          type: integer
          example: 20000
        licensePlate:
          type: string
          example: pco-9211
        price:
          type: integer
          example: 52500.00
        items:
          type: array
          maximum: 5
          minimum: 1
          items: 
            type: string
        status:
          type: string
          description: status of car in database
          enum:
            - ativo
            - inativo
            - excluído
    DeletedCar:
      allOf:
        - $ref: '#/components/schemas/Car'
        - type: object
          properties:
            status:
              enum: ["ativo", "inativo", "excluído"]
              example: "excluído"
    readCarsResult:
      type: object
      properties:
        per_page:
          type: integer
          example: 1
        page:
          type: integer
          example: 1
        data:
          type: array
          items:
            $ref: '#/components/schemas/Car'
    ApiResponse:
      type: object
      properties:
        code:
          type: integer
          format: int32
        type:
          type: string
        message:
          type: string
      xml:
        name: '##default'
    CreateOrder:
      required:
        - car
        - customer
      type: object
      properties:
        carId: 
          type: string
          format: uuid
          example: 9c376eed-4311-4e8d-9cb4-d7077a608448
        customerId:
          type: string
          example: 4c59c99f-9db9-4529-a54f-426f171492e2
    UpdateOrder:
      type: object
      
      properties:
        cep:
          type: string
          example: 12345678
        total: 
          type: number
          example: 1000
        initialDate:
          type: string
          example: 2024-10-10
        finalDate:
          type: string
          example: 2024-11-10
        cancelDate:
          type: string
          example: null
        status: 
          type: string
          example: Aprovado
              
              
    Order:
      type: object
      required:
        - id
        - cep
        - city
        - total
        - initialDate
        - finalDate
        - cancelDate
        - customerCpf
        - carId
        - status
        - uf
      properties:
        id:
          type: string
          format: uuid
          example: 56b40ff1-bafb-41d6-882c-f45bee53d850
        cep:
          type: string
          example: null
        city:
          type: string
          example: null
        total: 
          type: number
          example: 0
        initialDate:
          type: string
          example: null
        finalDate:
          type: string
          example: null
        cancelDate:
          type: string
          example: null
        customerCpf: 
          type: string
          example: 12345678910
        carId:
          type: string
          format: uuid
          example: 9c376eed-4311-4e8d-9cb4-d7077a608448
        status: 
          type: string
          example: Aberto
        uf: 
          type: string
          example: null
    readOrdersResult:
      type: object
      properties:
        per_page:
          type: integer
          example: 1
        page:
          type: integer
          example: 1
        data:
          type: array
          items:
            $ref: '#/components/schemas/Order'
  requestBodies:
    car:
      description: Car object that needs to be added to the store
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Car'
        application/xml:
          schema:
            $ref: '#/components/schemas/Car'
  securitySchemes:
    petstore_auth:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: https://petstore3.swagger.io/oauth/authorize
          scopes:
            write:pets: modify pets in your account
            read:pets: read your pets
    api_key:
      type: apiKey
      name: api_key
      in: header